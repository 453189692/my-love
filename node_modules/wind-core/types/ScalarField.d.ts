import { mat4 } from 'gl-matrix';
import Field from './Field';
declare type emptyFunc = (v?: any) => number;
export declare const defaultOptions: {
    colorScale: string;
    emptyColor: string;
    showArrow: boolean;
    arrowConfig: {};
    showScalarField: boolean;
    scalarField: {};
    useGl: boolean;
    useInterpolated: boolean;
    transformCoords: () => never[];
};
export interface IOptions {
    colorScale: string | string[] | emptyFunc;
    emptyColor?: string;
    showArrow?: boolean;
    arrowConfig?: {};
    showScalarField?: boolean;
    scalarFieldConfig?: {};
    useInterpolated?: boolean;
    useGl?: boolean;
    transformCoords?: (coords: [number, number]) => [number, number];
}
export default class ScalarField {
    private readonly ctx;
    private options;
    private field;
    static Field: typeof Field;
    private imageData;
    private shape;
    constructor(ctx: CanvasRenderingContext2D | WebGLRenderingContext, options: Partial<IOptions>, field?: Field);
    setOptions(options: Partial<IOptions>): void;
    getOptions(): IOptions;
    updateData(field: Field): void;
    project(coordinates: [number, number]): [number, number] | null;
    unproject(pixel: [number, number]): [number, number] | null;
    intersectsCoordinate(coordinates: [number, number]): boolean;
    clearCanvas(): void;
    private createImageData;
    private createBufferData;
    /**
     * 渲染前处理
     */
    prerender(matrix: mat4): void;
    /**
     * 开始渲染
     */
    render(matrix: mat4): void;
    /**
     * each frame render end
     */
    postrender(): void;
}
export {};
