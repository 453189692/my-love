import { mat3 } from 'gl-matrix';
export interface BufferComponents {
    buffer: WebGLBuffer;
    numComponents?: number;
    size?: number;
    type?: GLenum;
    normalize?: boolean;
    stride?: number;
    offset?: number;
}
export interface UniformSetters {
    [key: string]: (arg: any) => void;
}
export interface UniformValues {
    [key: string]: any;
}
export interface AttribSetters {
    [key: string]: (arg: any) => void;
}
export interface AttribValues {
    [key: string]: any;
}
export default class Base {
    vertShader: string;
    fragShader: string;
    readonly gl: WebGLRenderingContext;
    count: number;
    readonly program: WebGLProgram | null;
    textureUnit: number;
    uniformSetters: UniformSetters;
    attribSetters: AttribSetters;
    transfromStack: (() => void)[];
    projection: mat3;
    constructor(gl: WebGLRenderingContext, vShader: string, fShader: string);
    active(): this;
    deactive(): this;
    /**
     * from webgl-utils
     * @param gl
     * @param type
     * @returns {GLenum|undefined}
     */
    getBindPointForSamplerType(gl: WebGLRenderingContext, type: GLenum): number | undefined;
    /**
     * from webgl-utils
     * @param program
     * @param uniformInfo
     * @returns {function(...[*]=)}
     */
    createUniformSetter(program: WebGLProgram, uniformInfo: WebGLActiveInfo): ((v: Float32List) => void) | ((v: number) => void) | ((v: Int32List) => void) | ((textures: WebGLTexture[]) => void);
    /**
     * from webgl-utils
     * @returns {{}}
     */
    createUniformSetters(): UniformSetters;
    /**
     * from webgl-utils
     * @returns {function(...[*]=)}
     */
    createAttribSetter(index: number): (b: BufferComponents) => void;
    createAttributeSetters(): AttribSetters;
    setAttributes(attribs: AttribValues, setters?: AttribSetters | any): this;
    setUniforms(values: UniformValues, setters?: UniformSetters | any): this;
    /**
     * 可以override，默认使用此种方式清空画布
     * @param color
     * @returns {Base}
     */
    clear(color: number[]): this;
    /**
     * 运行次数
     * TODO: 目前没有好的方式去绑定顶点数量的关系
     * @param count
     */
    runTimes(count: number): this;
    /**
     * 更新视图投影
     * 默认应该被 override
     * @returns {Base}
     */
    updateProjection(): this;
    resize(flag: boolean): this;
    draw(): void;
    translate(): void;
    rotate(): void;
    scale(): void;
}
