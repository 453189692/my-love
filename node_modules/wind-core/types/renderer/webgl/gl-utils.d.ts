export declare function getDevicePixelRatio(): number;
/**
 * resize gl context
 * @link https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
 * @link https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-anti-patterns.html
 * @param canvas
 * @param pixelRatio
 * @returns {boolean}
 */
export declare function resizeCanvasSize(canvas: HTMLCanvasElement | OffscreenCanvas, pixelRatio?: number): boolean;
/**
 * get gl context
 * @param canvas
 * @param glOptions
 * @returns {null}
 */
export declare function getGlContext(canvas: HTMLCanvasElement, glOptions?: {}): WebGLRenderingContext | null;
/**
 * create shader and compile shader
 * @param gl
 * @param type
 * @param source
 * @returns {WebGLShader}
 */
export declare function createShader(gl: WebGLRenderingContext, type: GLenum, source: string): WebGLShader;
/**
 * create program from vertex and frag
 * @param gl
 * @param vertexShaderSource
 * @param fragmentShaderSource
 * @returns {WebGLProgram}
 */
export declare function createProgram(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string): WebGLProgram | null;
/**
 * create 2d texture
 * @param gl
 * @param filter
 * @param data
 * @param width
 * @param height
 * @returns {WebGLTexture}
 */
export declare function createTexture(gl: WebGLRenderingContext, filter: GLint, data: TexImageSource | Uint8Array, width: number, height: number): WebGLTexture | null;
/**
 * bind texture
 * @param gl
 * @param texture
 * @param unit
 */
export declare function bindTexture(gl: WebGLRenderingContext, texture: WebGLTexture, unit: number): void;
/**
 * delete texture
 * @param gl
 * @param texture
 */
export declare function destroyTexture(gl: WebGLRenderingContext, texture: WebGLTexture): void;
/**
 * create data buffer
 * @param gl
 * @param data
 * @returns {AudioBuffer | WebGLBuffer}
 */
export declare function createBuffer(gl: WebGLRenderingContext, data: any): WebGLBuffer | null;
/**
 * bind attribute
 * @param gl
 * @param buffer
 * @param attribute
 * @param numComponents
 */
export declare function bindAttribute(gl: WebGLRenderingContext, buffer: WebGLBuffer, attribute: GLuint, numComponents: GLint): void;
/**
 * bind framebuffer
 * @param gl
 * @param framebuffer
 * @param texture
 */
export declare function bindFramebuffer(gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer, texture: WebGLTexture): void;
/**
 * clear scene
 * @param gl
 * @param color
 */
export declare function clearScene(gl: WebGLRenderingContext, color: number[]): void;
/**
 * load image by url
 * @param src
 * @returns {Promise<Image>}
 */
export declare function loadImage(src: string): Promise<unknown>;
